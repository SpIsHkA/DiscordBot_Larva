const { Client, GatewayIntentBits, EmbedBuilder, PermissionsBitField, Permissions, MessageManager, Embed, Collection, ActivityType, SelectMenuBuilder, ActionRowBuilder, ChannelType, ButtonBuilder, Events, Intents, ModalBuilder, TextInputBuilder, TextInputStyle, ButtonStyle   } = require(`discord.js`);
const { joinVoiceChannel, createAudioPlayer, NoSubscriberBehavior, createAudioResource } = require('@discordjs/voice');
const fs = require('fs');

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessageReactions, GatewayIntentBits.GuildVoiceStates] }); 
const prefix = ';';


client.commands = new Collection();

require('dotenv').config();

const functions = fs.readdirSync("./src/functions").filter(file => file.endsWith(".js"));
const eventFiles = fs.readdirSync("./src/events").filter(file => file.endsWith(".js"));
const commandFolders = fs.readdirSync("./src/commands");

const process = require('node:process');

process.on('unhandledRejection', async (reason, promise) => {
  console.log('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑:', promise, '–ü—Ä–∏—á–∏–Ω–∞:', reason);
});

process.on('uncaughtException', (err) => {
  console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err)
});

process.on('uncaughtExceptionMonitor', (err, origin) => {
  console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä', err, origin)
});

(async () => {
    for (file of functions) {
        require(`./functions/${file}`)(client);
    }
    client.handleEvents(eventFiles, "./src/events");
    client.handleCommands(commandFolders, "./src/commands");
    client.login(process.env.token)
})();

client.on('ready', async  () => {
    console.log('–ë–æ—Ç –≤ —Å–µ—Ç–∏!');

    client.user.setActivity({
        name: 'Larva Games',
        type: ActivityType.Watching
    });

})




//–û—Ç–ø—Ä–∞–≤–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö

client.on('messageCreate', async (message) => {
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ä–æ–ª–∏–∫–∞—Ö
    if (message.author.id === '1096358669131730944' && message.channel.id === '1112792466928705728') { //–æ—Ç –∫–∞–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≤ –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ
      const roleId1 = '1109048071289057320'; // –∫–∞–∫–∞—è —Ä–æ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è
      const role1 = message.guild.roles.cache.get(roleId1);
  
      if (role1) {
        // –£–ø–æ–º–∏–Ω–∞–µ–º —Ä–æ–ª—å
        message.channel.send(`${role1}`);
  
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const copiedMessage = message.content;
  
        // –†–∞–∑–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É
        const [description1, videoLink1] = copiedMessage.split('\n\n');
  
        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç–º–±–µ–¥–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        const embedDescription1 = new EmbedBuilder()
          .setDescription(description1)
          .setColor('#FF0000'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—ã–π —Ü–≤–µ—Ç
  
        await message.channel.send({ embeds: [embedDescription1] });
  
        // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç–º–±–µ–¥–µ —Å —Å—Å—ã–ª–∫–æ–π
        message.channel.send(`${videoLink1}`);
  
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message.delete();
      }
    } 
});

// –í–æ–ø—Ä–æ—Å—ã —Å –≤–µ—Ç–∫–∞–º–∏
client.on('messageCreate', async (message) => {

    
    const channelId = '1114883807020056636'; // –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ

    if (message.channel.id === channelId && message.author.id !== client.user.id) {
      const copiedMessage = message.content;
      await message.delete();
  
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π MessageEmbed
      const embed = new EmbedBuilder()
        .setColor('#8300D3')
        .setTitle('–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å')
        .setThumbnail(message.author.avatarURL({ dynamic: true }))
        .setDescription(`${copiedMessage}\n\n**–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** ${message.author}`)
  
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥ –≤ —Ç–æ—Ç –∂–µ –∫–∞–Ω–∞–ª
      const sentEmbed = await message.channel.send({ embeds: [embed] });

      const thread = await sentEmbed.startThread({
        name: 'üí≠Ôºè–û—Ç–≤–µ—Ç',
        autoArchiveDuration: 60,
        reason: 'Starting a discussion based on the message',
      });

      embed.fields[0].value = thread.url;
      await sentEmbed.edit({ embeds: [embed] });
      
    }
})

client.on('messageCreate', async (message) => {
  // –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ—Ç–∫—É
  const userId = '1096358669131730944';
  const channelId = '1096367851411083295';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω—É–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
  if (message.author.id === userId && message.channel.id === channelId) {
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const thread = await message.startThread({
      name: 'üí≠Ôºè–û–±—Å—É–∂–¥–µ–Ω–∏–µ',
      autoArchiveDuration: 60, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    });
  }
});

client.on('messageCreate', async (message) => {
  // –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ—Ç–∫—É
  const userId = '1096358669131730944';
  const channelId = '1096367417850089552';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω—É–∂–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
  if (message.author.id === userId && message.channel.id === channelId) {
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const thread = await message.startThread({
      name: 'üí≠Ôºè–û–±—Å—É–∂–¥–µ–Ω–∏–µ',
      autoArchiveDuration: 60, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    });
  }
});

client.on('messageCreate', async (message) => {
  // –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤–µ—Ç–∫—É
  const channelId = '1096369333590048878';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
  if (message.channel.id === channelId) {
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const thread = await message.startThread({
      name: 'üí≠Ôºè–û–±—Å—É–∂–¥–µ–Ω–∏–µ',
      autoArchiveDuration: 60, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    });
  }
});


//–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≤–µ–Ω—Ç
/*
const buttonStates = new Map();

client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isButton()) {
    if (interaction.customId === 'application_button') {
      const userButtonState = buttonStates.get(interaction.user.id);

      if (!userButtonState || userButtonState === 'active') {
        const modal = new ModalBuilder()
          .setTitle('–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏')
          .setCustomId(`complaint_modal-${interaction.user.id}`);

        const username = new TextInputBuilder()
          .setCustomId('username')
          .setLabel('–ù–∏–∫ –≤ minecraft')
          .setPlaceholder('')
          .setRequired(true)
          .setStyle(TextInputStyle.Short);

        const approval = new TextInputBuilder()
          .setCustomId('approval')
          .setLabel('–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≤–µ–Ω—Ç–∞?')
          .setPlaceholder('–î–∞')
          .setRequired(true)
          .setStyle(TextInputStyle.Short);

        const row_username = new ActionRowBuilder().addComponents(username);
        const row_approval = new ActionRowBuilder().addComponents(approval);

        modal.addComponents(row_username, row_approval);

        try {
          await interaction.showModal(modal);
        } catch (error) {
          console.error(error);
          await interaction.reply({
            content: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            ephemeral: true,
          });
        }

        const response = await interaction.awaitModalSubmit({ time: 300000 });
        const usernameInput = response.fields.getTextInputValue("username");
        const approvalInput = response.fields.getTextInputValue("approval");

        await response.deferUpdate();

        const embed = new EmbedBuilder()
          .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
          .setColor('#8300D3')
          .setTitle(`–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞`)
          .addFields(
            { name: "–ù–∏–∫ –≤ minecraft", value: usernameInput },
            { name: "–°–æ–≥–ª–∞—Å–∏–µ", value: approvalInput },
            { name: "–û—Ç –∫–æ–≥–æ:", value: `${interaction.member}` },
          )
          .setTimestamp()

        const guildId = "1096364345002315779"; //ID —Å–µ—Ä–≤–µ—Ä–∞
        const channelId = "1114147057582747679"; //ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö
      
        const guild = await interaction.client.guilds.fetch(guildId);
        const channel = guild.channels.cache.get(channelId);
         
        try {
          await channel.send({ embeds: [embed] });
          await interaction.followUp({ content: "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∏–≤–µ–Ω—Ç.", ephemeral: true });
        } catch (error) {
          console.error(error);
          await interaction.followUp({
            content: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            ephemeral: true,
          });
        }

        buttonStates.set(interaction.user.id, 'disabled');
      } else {
        await interaction.reply({
          content: "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
          ephemeral: true,
        });
      }
    }
  }
});
*/
/*
//–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã
client.on(Events.InteractionCreate, async interaction => {
    if (interaction.isButton()) {
        if (interaction.customId === 'complaint') {
            const modal = new ModalBuilder()
                .setTitle('–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã')
                .setCustomId(`complaint_modal-${interaction.user.id}`);

            const username_violator = new TextInputBuilder()
                .setCustomId('username_violator')
                .setLabel('–ù–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è')
                .setPlaceholder('spichkaüñ§#6666 –∏–ª–∏ Ruletoedus#2475')
                .setRequired(true)
                .setStyle(TextInputStyle.Short);

            const user_reason = new TextInputBuilder()
                .setCustomId('user_reason')
                .setLabel('–ü—Ä–∏—á–∏–Ω–∞')
                .setPlaceholder('–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è')
                .setRequired(true)
                .setStyle(TextInputStyle.Paragraph);

            const row_user_violator = new ActionRowBuilder().addComponents(username_violator);
            const row_user_reason = new ActionRowBuilder().addComponents(user_reason);

            modal.addComponents(row_user_violator, row_user_reason);

            try {
                await interaction.showModal(modal);
              } catch (error) {
                console.error(error);
                await interaction.reply({
                  content: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                  ephemeral: true,
                })
              };

            const response = await interaction.awaitModalSubmit({ time: 300000 });
            const username_violatorInput = response.fields.getTextInputValue("username_violator");
            const user_reasonInput = response.fields.getTextInputValue("user_reason");
             
            await response.deferUpdate();

            const embed = new EmbedBuilder()
            .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
            .setColor('#8300D3')
            .setTitle(`–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞`)
            .addFields(
              { name: "–ù–∞—Ä—É—à–∏—Ç–µ–ª—å", value: username_violatorInput },
              { name: "–ü—Ä–∏—á–∏–Ω–∞", value: user_reasonInput },
              { name: "–û—Ç –∫–æ–≥–æ:", value: `${interaction.member}` },
            )
            .setTimestamp()

            const guildId = "1096364345002315779"; //ID —Å–µ—Ä–≤–µ—Ä–∞
            const channelId = "1113841924877590570"; //ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∂–∞–ª–æ–±–∞—Ö
        
            const guild = await interaction.client.guilds.fetch(guildId);
            const channel = guild.channels.cache.get(channelId);
           
            try {
              await channel.send({ embeds: [embed] });
              await interaction.followUp({ content: "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ –≤—Å—ë–º —Ä–∞–∑–±–µ—Ä–µ–º—Å—è!", ephemeral: true });
            } catch (error) {
              console.error(error);
              await interaction.followUp({
                content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ",
                ephemeral: true,
              });
            }


        }
    }
    
})*/

const ticketSchema = require('./Schemas.js/ticketSchema')
client.on(Events.InteractionCreate, async interaction => {

  if (interaction.isButton()) return;
  if (interaction.isChatInputCommand()) return;

  const modal = new ModalBuilder()
  .setTitle('–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã')
  .setCustomId(`modal`);

  const username_violator = new TextInputBuilder()
  .setCustomId('username_violator')
  .setLabel('–ù–∏–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è')
  .setPlaceholder('spichkaüñ§#6666 –∏–ª–∏ Ruletoedus#2475')
  .setRequired(true)
  .setStyle(TextInputStyle.Short);

  const user_reason = new TextInputBuilder()
  .setCustomId('user_reason')
  .setLabel('–ü—Ä–∏—á–∏–Ω–∞')
  .setPlaceholder('–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è')
  .setRequired(true)
  .setStyle(TextInputStyle.Paragraph);

  const row_user_violator = new ActionRowBuilder().addComponents(username_violator);
  const row_user_reason = new ActionRowBuilder().addComponents(user_reason);

  modal.addComponents(row_user_violator, row_user_reason);

  let choices;
  if (interaction.isSelectMenu()) {
    if (interaction.customId === 'select') {
      
      choices = interaction.values;

      const result = choices.join('');

      ticketSchema.findOne({ Guild: interaction.guild.id}, async (err, data) => {

        const filter = {Guild: interaction.guild.id};
        const update = {Ticket: result};

        ticketSchema.updateOne(filter, update, {
          new: true
        }).then(value => {
          console.log(value)
        })
      })
    }
  }

  if (!interaction.isModalSubmit) {
    interaction.showModal(modal)
  }
  

})

client.on(Events.InteractionCreate, async interaction => {

  if (interaction.isModalSubmit()) {

    if (interaction.customId === 'modal') {

      ticketSchema.findOne({ Guild: interaction.guild.id}, async (err, data) => {

        const username_violatorInput = response.fields.getTextInputValue("username_violator");
        const user_reasonInput = response.fields.getTextInputValue("user_reason");

        const posChannel = await interaction.guild.channels.cache.find(c => c.name === `ticket-${interaction.user.id}`);
        if (posChannel) return await interaction.reply({ content: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –±–∏–ª–µ—Ç - ${posChannel} `, ephemeral: true})

        const category = data.Channel;

        const embed = new EmbedBuilder()
        .setColor('Aqua')
        .setTitle(`${interaction.user.username} –±–∏–ª–µ—Ç`)
        .setDescription(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –±–∏–ª–µ—Ç`)
        .addFields({ name: `–ù–∞—Ä—É—à–∏—Ç–µ–ª—å`, value: `${username_violatorInput}`})
        .addFields({ name: `–ü—Ä–∏—á–∏–Ω–∞`, value: `${user_reasonInput}`})
        .addFields({ name: `–¢–∏–ø`, value: `${data.Ticket}`})
        .setFooter({ text: `${interaction.guild.name}`})

        const button = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
          .setCustomId('ticket')
          .setLabel(`–ó–∞–∫—Ä—ã—Ç—å –±–∏–ª–µ—Ç`)
          .setStyle(ButtonStyle.Danger)
        )

        let channel = await interaction.guild.channels.create({
          name: `–±–∏–ª–µ—Ç-${interaction.user.id}`,
          type: ChannelType.GuildText,
          parent: `${category}`
        })

        let msg = await channel.send({ embeds: [embed], components: [button]});
        await interaction.reply({ content: `–í–∞—à –±–∏–ª–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ ${channel}`, ephemeral: true})

        const collector = msg.createMessageComponentCollector()

        collector.on('collect', async i => {
          ;(await channel).delete();

          const dmEmbed = new EmbedBuilder()
          .setColor('Aqua')
          .setTitle(`–í–∞—à –±–∏–ª–µ—Ç –∑–∞–∫—Ä—ã—Ç`)
          .setDescription(`–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–≤—è–∑–∞–ª–∏—Å—å —Å –Ω–∞–º–∏`)
          .setFooter({ text: `${interaction.guild.name}`}) 
          .setTimestamp()

          await interaction.member.send({ embeds: [dmEmbed]}).catch(err => {
            return;
          })
        })
      })
    }
  }
})

//–Ω–∞–≤–∏–≥–∞—Ü–∏—è
client.on(Events.InteractionCreate, async interaction => { 

    //–†–æ–ª–∏
    const role1 = new EmbedBuilder()
        .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
        .setTitle ("```Staff —Ä–æ–ª–∏:```")
        .setDescription("<@&1099693900534394900> ‚Äî —Ä–æ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–µ—Ä–≤–µ—Ä–∞ \n \n<@&1099619378577809488> ‚Äî –≥–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è \n \n<@&1100050812111167518> ‚Äî —Å—Ç. –º–æ–¥–µ—Ä–∞—Ü–∏—è\n \n<@&1102131655432486992> ‚Äî –º–ª. –º–æ–¥–µ—Ä–∞—Ü–∏—è \n \n<@&1102132830131191909> ‚Äî –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≤–µ–Ω—Ç–æ–≤")
        .setColor('#3D4C8D')
    
    const role2 = new EmbedBuilder()
        .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
        .setTitle ("```–ü—Ä–æ—á–∏–µ —Ä–æ–ª–∏:```")
        .setDescription("<@&1098181448403517451>  ‚Äî  –±—É—Å—Ç–µ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ \n \n<@&1123236996874248363> ‚Äî –ø–æ–¥–ø–∏—Å—á–∏–∫ Boosty \n \n<@&1109048071289057320> ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ \n \n<@&1109048394447605810> ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏–≥—Ä \n \n<@&1109048976273055754> ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–≤–µ–Ω—Ç–∞—Ö \n \n<@&1115616806476972174> ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö")
        .setColor('#3D4C8D')

    //–ö–æ–º–∞–Ω–¥—ã
    const comand1 = new EmbedBuilder()
        .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
        .setTitle ("```–ö–æ–º–∞–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –±–æ—Ç–æ–≤```")
        .setDescription("**Larva:**\n `/bugreport` - —Å–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–∞—Ö –±–æ—Ç–∞ \n\n`/server-info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ \n \n**Larva Economy:**\n `/claimgift` - –∑–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤) \n\n`/promocode` - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ \n\n`/rob` - —É–∫—Ä–∞—Å—Ç—å –º–æ–Ω–µ—Ç—ã —É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n\n`/role` - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–æ–ª–µ–π \n\n`/top` - —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ ü™≤ \n\n`/transfer` - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã (–∫–æ–º–∏—Å—Å–∏—è 5%) \n\n`/wallet` - –≤–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ü™≤ \n\n`/shop` - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
        .setColor('#3D4C8D')

    //–ò–≥—Ä—ã
    const game1 = new EmbedBuilder()
        .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
        .setTitle ("```Larva Games:```")
        .setDescription("**The Slime Plague** ‚Äî [–°–º–æ—Ç—Ä–µ—Ç—å –≤ steam](https://store.steampowered.com/app/2359980/The_Slime_Plague/) \n \n** No gravity no sanity** ‚Äî [–°–º–æ—Ç—Ä–µ—Ç—å –≤ steam](https://store.steampowered.com/app/2523780/No_Gravity_No_Sanity/)")
        .setColor('#3D4C8D')

    //–°–æ—Ü. —Å–µ—Ç–∏
    const social1 = new EmbedBuilder()
        .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
        .setTitle ("```–°–æ—Ü. —Å–µ—Ç–∏:```")
        .setDescription("<:youtube:1110977941053132800> ‚Äî [YouTube](https://www.youtube.com/@larva_games) \n \n<:tiktok:1110978483808641094> ‚Äî [Larva Games](https://www.tiktok.com/@larva_games) \n \n<:tiktok:1110978483808641094> ‚Äî [Larva Life](https://www.tiktok.com/@larva.life) \n \n<:TwitchGlitchPurple:1118165723949314098> ‚Äî [Twitch](https://www.twitch.tv/larvagames) \n \n<:telegram:1253354454921646131> ‚Äî [Telegram](https://t.me/larva_games)")
        .setColor('#3D4C8D') 

    if (!interaction.isSelectMenu()) return;

    if (interaction.customId === 'nav3') {
        const valor = interaction.values[0];

        if (valor === 'role') {
            await interaction.reply({ embeds: [role1, role2], ephemeral: true });
        } else if (valor === 'command') {
            await interaction.reply({ embeds: [comand1], ephemeral: true });
        } else if (valor === 'game') {
            await interaction.reply({ embeds: [game1], ephemeral: true });
        } else if (valor === 'social') {
            await interaction.reply({ embeds: [social1], ephemeral: true });
        }
    }
})

//–Ω–∞–±–æ—Ä—ã
client.on(Events.InteractionCreate, async interaction => { 

  //–º–æ–¥–µ—Ä
  const moder1 = new EmbedBuilder()
      .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
      .setTitle ("–ù–∞–±–æ—Ä –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –•–µ–ª–ø–µ—Ä–∞")
      .setDescription("\n\n```–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:``` \n **1.** –î—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤ \n**2.** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç! \n**3.** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø–∞—Å—Ç—å –≤ –¥—Ä—É–∑—å—è –∫ Larva Games (–Ω–µ—Ç) \n\n```–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:``` \n‚Ä¢ 14+ –ª–µ—Ç \n‚Ä¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å \n‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
      .setColor('#3D4C8D')

    const moderButton = new ButtonBuilder()
      .setCustomId('moder_recruitment')
      .setLabel('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
      .setStyle(ButtonStyle.Success);

    const button1 = new ActionRowBuilder()
		.addComponents(moderButton);

  //–∏–≤–µ–Ω—Ç–µ—Ä
  const eventer1 = new EmbedBuilder()
      .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
      .setTitle ("–ù–∞–±–æ—Ä –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ò–≤–µ–Ω—Ç–µ—Ä")
      .setDescription("\n\n```–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:``` \n **1.** –î—Ä—É–∂–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤ \n**2.** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç! \n**3.** –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø–∞—Å—Ç—å –≤ –¥—Ä—É–∑—å—è –∫ Larva Games (–Ω–µ—Ç) \n\n```–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:``` \n‚Ä¢ 14+ –ª–µ—Ç \n‚Ä¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å \n‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ—Å—Ç—å")
      .setColor('#3D4C8D')

    const eventButton = new ButtonBuilder()
      .setCustomId('event_recruitment')
      .setLabel('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
      .setStyle(ButtonStyle.Success);

    const button2 = new ActionRowBuilder()
		  .addComponents(eventButton);


  if (!interaction.isSelectMenu()) return;

  if (interaction.customId === 'nabor3') {
      const valor = interaction.values[0];

      if (valor === 'moder') {
          await interaction.reply({ embeds: [moder1], components: [button1], ephemeral: true });
      } else if (valor === 'eventer') {
          await interaction.reply({ embeds: [eventer1], components: [button2], ephemeral: true });
      }
  }
})

//–ù–∞–±–æ—Ä –≤ –∏–≤–µ–Ω—Ç–µ—Ä–æ–≤
client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isButton()) {
      if (interaction.customId === 'event_recruitment') {
          const modal = new ModalBuilder()
              .setTitle('–ù–∞–±–æ—Ä –≤ –∏–≤–µ–Ω—Ç–µ—Ä–æ–≤')
              .setCustomId(`complaint_modal-${interaction.user.id}`);

          const device = new TextInputBuilder()
              .setCustomId('device')
              .setLabel('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–∏–¥–∏—Ç–µ')
              .setPlaceholder('–£–∫–∞–∂–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –¥–∏—Å–∫–æ—Ä–¥–µ')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const time = new TextInputBuilder()
              .setCustomId('time')
              .setLabel('–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å')
              .setPlaceholder('–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä—É –≤ –±—É–¥–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);
          
          const why = new TextInputBuilder()
              .setCustomId('why')
              .setLabel('–ü–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∞—Å –≤–∑—è—Ç—å')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const experience = new TextInputBuilder()
              .setCustomId('experience')
              .setLabel('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
              .setPlaceholder('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const about_me = new TextInputBuilder()
              .setCustomId('about_me')
              .setLabel('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
              .setPlaceholder('–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è, –º–Ω–µ 14 –ª–µ—Ç, —è –ª—é–±–ª—é –º—É—Ä—á–∞—Ç—å –≤ –≤–æ–π—Å–µ')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const row_device = new ActionRowBuilder().addComponents(device);
          const row_time = new ActionRowBuilder().addComponents(time);
          const row_why = new ActionRowBuilder().addComponents(why);
          const row_experience = new ActionRowBuilder().addComponents(experience);
          const row_about_me = new ActionRowBuilder().addComponents(about_me);

          modal.addComponents(row_device, row_time, row_why, row_experience, row_about_me);

          try {
              await interaction.showModal(modal);
            } catch (error) {
              console.error(error);
              await interaction.reply({
                content: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                ephemeral: true,
              })
            };

          const response = await interaction.awaitModalSubmit({ time: 300000 });
          const deviceInput = response.fields.getTextInputValue("device");
          const timeInput = response.fields.getTextInputValue("time");
          const whyInput = response.fields.getTextInputValue("why");
          const experienceInput = response.fields.getTextInputValue("experience");
          const about_meInput = response.fields.getTextInputValue("about_me");
           
          await response.deferUpdate();

          const embed = new EmbedBuilder()
          .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
          .setColor('#8300D3')
          .setTitle(`–ù–∞–±–æ—Ä –Ω–∞ –∏–≤–µ–Ω—Ç–µ—Ä–∞`)
          .addFields(
            { name: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–∏–¥–∏—Ç–µ", value: deviceInput },
            { name: "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", value: timeInput },
            { name: "–ü–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∞—Å –≤–∑—è—Ç—å", value: whyInput },
            { name: "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", value: experienceInput },
            { name: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", value: about_meInput },
            { name: "–û—Ç –∫–æ–≥–æ:", value: `${interaction.member}` },
          )
          .setTimestamp()

          const guildId = "1096364345002315779"; //ID —Å–µ—Ä–≤–µ—Ä–∞
          const channelId = "1114147057582747679"; //ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö
      
          const guild = await interaction.client.guilds.fetch(guildId);
          const channel = guild.channels.cache.get(channelId);
         
          try {
            await channel.send({ embeds: [embed] });
            await interaction.followUp({ content: "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É!", ephemeral: true });
          } catch (error) {
            console.error(error);
            await interaction.followUp({
              content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É!",
              ephemeral: true,
            });
          }


      }
  }
  
})

//–ù–∞–±–æ—Ä –≤ —Ö–µ–ª–ø–µ—Ä–æ–≤
client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isButton()) {
      if (interaction.customId === 'moder_recruitment') {
          const modal = new ModalBuilder()
              .setTitle('–ù–∞–±–æ—Ä –≤ —Ö–µ–ª–ø–µ—Ä—ã')
              .setCustomId(`complaint_modal-${interaction.user.id}`);

          const device = new TextInputBuilder()
              .setCustomId('device')
              .setLabel('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–∏–¥–∏—Ç–µ')
              .setPlaceholder('–£–∫–∞–∂–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –¥–∏—Å–∫–æ—Ä–¥–µ')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const time = new TextInputBuilder()
              .setCustomId('time')
              .setLabel('–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å')
              .setPlaceholder('–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä—É –≤ –±—É–¥–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);
          
          const why = new TextInputBuilder()
              .setCustomId('why')
              .setLabel('–ü–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∞—Å –≤–∑—è—Ç—å')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const experience = new TextInputBuilder()
              .setCustomId('experience')
              .setLabel('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')
              .setPlaceholder('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const about_me = new TextInputBuilder()
              .setCustomId('about_me')
              .setLabel('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ')
              .setPlaceholder('–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è, –º–Ω–µ 14 –ª–µ—Ç, —è –ª—é–±–ª—é –º—É—Ä—á–∞—Ç—å –≤ –≤–æ–π—Å–µ')
              .setRequired(true)
              .setStyle(TextInputStyle.Paragraph);

          const row_device = new ActionRowBuilder().addComponents(device);
          const row_time = new ActionRowBuilder().addComponents(time);
          const row_why = new ActionRowBuilder().addComponents(why);
          const row_experience = new ActionRowBuilder().addComponents(experience);
          const row_about_me = new ActionRowBuilder().addComponents(about_me);

          modal.addComponents(row_device, row_time, row_why, row_experience, row_about_me);

          try {
              await interaction.showModal(modal);
            } catch (error) {
              console.error(error);
              await interaction.reply({
                content: "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
                ephemeral: true,
              })
            };

          const response = await interaction.awaitModalSubmit({ time: 300000 });
          const deviceInput = response.fields.getTextInputValue("device");
          const timeInput = response.fields.getTextInputValue("time");
          const whyInput = response.fields.getTextInputValue("why");
          const experienceInput = response.fields.getTextInputValue("experience");
          const about_meInput = response.fields.getTextInputValue("about_me");
           
          await response.deferUpdate();

          const embed = new EmbedBuilder()
          .setImage('https://cdn.discordapp.com/attachments/1099668302554472551/1112422572483690558/1.png')
          .setColor('#3D4C8D')
          .setTitle(`–ù–∞–±–æ—Ä –Ω–∞ —Ö–µ–ª–ø–µ—Ä–∞`)
          .addFields(
            { name: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–∏–¥–∏—Ç–µ", value: deviceInput},
            { name: "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", value: timeInput },
            { name: "–ü–æ—á–µ–º—É –º—ã –¥–æ–ª–∂–Ω—ã –≤–∞—Å –≤–∑—è—Ç—å", value: whyInput },
            { name: "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", value: experienceInput },
            { name: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", value: about_meInput },
            { name: "–û—Ç –∫–æ–≥–æ:", value: `${interaction.member}` },
          )
          .setTimestamp()

          const guildId = "1096364345002315779"; //ID —Å–µ—Ä–≤–µ—Ä–∞
          const channelId = "1114147057582747679"; //ID –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö
      
          const guild = await interaction.client.guilds.fetch(guildId);
          const channel = guild.channels.cache.get(channelId);
         
          try {
            await channel.send({ embeds: [embed] });
            await interaction.followUp({ content: "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É!", ephemeral: true });
          } catch (error) {
            console.error(error);
            await interaction.followUp({
              content: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É!",
              ephemeral: true,
            });
          }


      }
  }
  
})

const GiveawaysManager = require('./giveaways');
client.giveawayManager = new GiveawaysManager(client, {
    default: {
      botsCanWin: false,
      embedColor: '#3D4C8D',
      embedColorEnd: '#3D4C8D',
      reaction: 'üéâ',
    },
});

//–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–æ—Å–æ–≤
const pollschema = require('./Schemas.js/votes');
const internal = require('stream');
client.on(Events.InteractionCreate, async i => {

  if (!i.guild) return;
  if (!i.message) return;
  if (!i.isButton) return;

  const data = await pollschema.findOne({ Guild: i.guild.id, Msg: i.message.id });
  if (!data) return;
  const msg = await i.channel.messages.fetch(data.Msg);

  if (i.customId === 'up') {
    if (data.UpMembers.includes(i.user.id)) return await i.reply({ content: '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', ephemeral: true });

    let downvotes = data.Downvote;
    if (data.DownMembers.includes(i.user.id)) {
      downvotes = downvotes - 1;
    }

    const newembed = EmbedBuilder.from(msg.embeds[0]).setFields({ name: '–ó–∞', value: `**${data.Upvote + 1}** –≥–æ–ª–æ—Å–æ–≤`, inline: true }, { name: '–ü—Ä–æ—Ç–∏–≤', value: `**${downvotes}** –≥–æ–ª–æ—Å–æ–≤`, inline: true }, { name: '–ê–≤—Ç–æ—Ä', value: `<@${data.Owner}>` })

    const buttons = new ActionRowBuilder()
      .addComponents(

        new ButtonBuilder()
          .setCustomId('up')
          .setLabel('‚úÖ')
          .setStyle(ButtonStyle.Success),

        new ButtonBuilder()
          .setCustomId('down')
          .setLabel('‚ùå')
          .setStyle(ButtonStyle.Danger),

        new ButtonBuilder()
          .setCustomId('votes')
          .setLabel('–ì–æ–ª–æ—Å–∞')
          .setStyle(ButtonStyle.Secondary),
      )

      await i.update({ embeds: [newembed], components: [buttons]});

      data.Upvote++;

      if (data.DownMembers.includes(i.user.id)) {
        data.Downvote = data.Downvote - 1;
      }

      data.UpMembers.push(i.user.id);
      data.DownMembers.pull(i.user.id);
      data.save();

  }

  if (i.customId === 'down') {

    if (data.DownMembers.includes(i.user.id)) return await i.reply({ content: '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', ephemeral: true });

    let upvotes = data.Upvote;
    if (data.UpMembers.includes(i.user.id)) {
      upvotes = upvotes - 1;
    }

    const newembed = EmbedBuilder.from(msg.embeds[0]).setFields({ name: '–ó–∞', value: `**${upvotes}** –≥–æ–ª–æ—Å–æ–≤`, inline: true }, { name: '–ü—Ä–æ—Ç–∏–≤', value: `**${data.Downvote + 1}** –≥–æ–ª–æ—Å–æ–≤`, inline: true }, { name: '–ê–≤—Ç–æ—Ä', value: `<@${data.Owner}>` })

    const buttons = new ActionRowBuilder()
    .addComponents(

      new ButtonBuilder()
        .setCustomId('up')
        .setLabel('‚úÖ')
        .setStyle(ButtonStyle.Success),

      new ButtonBuilder()
        .setCustomId('down')
        .setLabel('‚ùå')
        .setStyle(ButtonStyle.Danger),

      new ButtonBuilder()
        .setCustomId('votes')
        .setLabel('–ì–æ–ª–æ—Å–∞')
        .setStyle(ButtonStyle.Secondary),
    )

    await i.update({ embeds: [newembed], components: [buttons]});

    data.Downvote++;

    if (data.UpMembers.includes(i.user.id)) {
      dataUpvote = data.Upvote - 1;
    }

    data.DownMembers.push(i.user.id);
    data.UpMembers.pull(i.user.id);
    data.save();
  }

  if(i.customId === 'votes') {

    let upvoters = [];
    await data.UpMembers.forEach(async member => {
      upvoters.push(`<@${member}>`)
    });

    let downvoters = [];
    await data.DownMembers.forEach(async member => {
      downvoters.push(`<@${member}>`)
    });

    const embed = new EmbedBuilder()
    .setColor('#8300D3')
    .setAuthor({ name: '–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–æ—Å–æ–≤'})
    .setFooter({ text: '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–ø—Ä–æ—Å—ã'})
    .setTimestamp()
    .setTitle(`–ì–æ–ª–æ—Å–∞`)
    .addFields({ name: `–ó–∞ ${upvoters.length}`, value: `${upvoters.join(', ').slice(0, 1020) || `–ù–µ—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö`}` , inline: true})
    .addFields({ name: `–ü—Ä–æ—Ç–∏–≤ ${downvoters.length}`, value: `${downvoters.join(', ').slice(0, 1020) || `–ù–µ—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö`}`, inline: true})

    await i.reply({ embeds: [embed], ephemeral: true})
  }
})